openapi: 3.0.3
info:
  title: WorqHat AI API Endpoints
  description: API for interacting with WorqHat AI Services
  version: 3.0.0

servers:
  - url: https://api.worqhat.com
    description: Production server

paths:
  /authentication:
    post:
      summary: This endpoint is to check your API request and test if it is working by authenticating the user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: Unauthorized - Invalid API Key or Organization Key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      security:
        - ApiKeyAuth: [ ]
          OrgKeyAuth: [ ]

  /api/ai/speech-text:
    post:
      summary: Our Speech Extraction API endpoint is used to extract text from audio files.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                audio:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextConversionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: Unauthorized - Invalid API Key or Organization Key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      security:
        - ApiKeyAuth: [ ]
          OrgKeyAuth: [ ]

  /api/ai/moderation:
    post:
      summary: Moderates text content.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text_content:
                  type: string
              required:
                - text_content
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModerationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: Unauthorized - Invalid API Key or Organization Key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      security:
        - ApiKeyAuth: [ ]
          OrgKeyAuth: [ ]

  /api/ai/images/v2/image-moderation:
    post:
      summary: Moderates text content.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
              required:
                - image
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageModerationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: Unauthorized - Invalid API Key or Organization Key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Response'
        '406':
          description: Not Acceptable - Invalid Content Type or Content not supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error406Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      security:
        - ApiKeyAuth: [ ]
          OrgKeyAuth: [ ]

  /api/ai/v2/web-extract:
    post:
      summary: Extract content from a web page.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url_path:
                  type: string
                  description: The URL of the web page to extract content from.
                headline:
                  type: boolean
                  description: Flag indicating whether to extract headlines from the web page. (Optional)
                inline_code:
                  type: boolean
                  description: Flag indicating whether to extract inline code snippets from the web page. (Optional)
                code_blocks:
                  type: boolean
                  description: Flag indicating whether to extract code blocks from the web page. (Optional)
                references:
                  type: boolean
                  description: Flag indicating whether to extract references from the web page. (Optional)
                tables:
                  type: boolean
                  description: Flag indicating whether to extract tables from the web page. (Optional)
              required:
                - url_path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebExtractResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: Unauthorized - Invalid API Key or Organization Key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      security:
        - ApiKeyAuth: [ ]
          OrgKeyAuth: [ ]

  /api/ai/v2/pdf-extract:
    post:
      summary: Extract text or structured data from a PDF file
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PDFExtractRequest"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PDFExtractResponse"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: Unauthorized - Invalid API Key or Organization Key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        '406':
          description: Not Acceptable - Invalid Content Type or Content not supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error406Response'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      security:
        - ApiKeyAuth: [ ]
          OrgKeyAuth: [ ]

  /api/ai/images/v2/image-text-detection:
    post:
      summary: Perform text detection and bounding on an image.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: The ID of the response
                  status:
                    type: string
                    description: The status of the response
                  timestamp:
                    type: integer
                    description: The timestamp of the response
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/ImageDetectedText'
                    description: The detected text content
                  processing_count:
                    type: integer
                    description: The number of images processed


        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: Unauthorized - Invalid API Key or Organization Key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        '406':
          description: Not Acceptable - Invalid Content Type or Content not supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error406Response'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      security:
        - ApiKeyAuth: [ ]
          OrgKeyAuth: [ ]

  /api/ai/content/v2:
    post:
      summary: Get AI Content
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                  description: The question you want to ask the AI.
                preserve_history:
                  type: boolean
                  description: Whether you want to preserve the history of the conversation or not.
                history_object:
                  type: object
                  description: The history object that you want to pass to the model. This is
                    only required if preserve_history is set to true. Pass the Questions and
                    Answers as Key Value Pairs to help the model understand.
                  example:
                    "Hi, who are you?": "My name is WorqBot, nice to meet you!"
                    "How can you help me?": "I can assist you with various tasks and provide information on a wide range of topics."
                training_data:
                  type: string
                  description: The training data you want to pass to the AI.
                randomness:
                  type: number
                  minimum: 0.0
                  maximum: 1.0
                  description: The randomness factor that you want to pass to the model. This is
                    only required if you want to set the randomness factor. Default is 0.4. You can
                    set it to 0.0 to disable randomness and set it to 1.0 to enable maximum
                    randomness. We recommend setting it to anything between 0.0 and 0.5 for best
                    results.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AIContentV2Response"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: Unauthorized - Invalid API Key or Organization Key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        '406':
          description: Not Acceptable - Invalid Content Type or Content not supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error406Response'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      security:
        - ApiKeyAuth: [ ]
          OrgKeyAuth: [ ]

  /api/ai/content/v3:
    post:
      summary: Get AI Content
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                  description: The question you want to ask the AI.
                preserve_history:
                  type: boolean
                  description: Whether you want to preserve the history of the conversation or not.
                history_object:
                  type: object
                  description: The history object that you want to pass to the model. This is
                    only required if preserve_history is set to true. Pass the Questions and
                    Answers as Key Value Pairs to help the model understand.
                  example:
                    "Hi, who are you?": "My name is WorqBot, nice to meet you!"
                    "How can you help me?": "I can assist you with various tasks and provide information on a wide range of topics."
                training_data:
                  type: string
                  description: The training data you want to pass to the AI.
                randomness:
                  type: number
                  minimum: 0.0
                  maximum: 1.0
                  description: The randomness factor that you want to pass to the model. This is
                    only required if you want to set the randomness factor. Default is 0.4. You can
                    set it to 0.0 to disable randomness and set it to 1.0 to enable maximum
                    randomness. We recommend setting it to anything between 0.0 and 0.5 for best
                    results.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AIContentV3Response"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        '401':
          description: Unauthorized - Invalid API Key or Organization Key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        '406':
          description: Not Acceptable - Invalid Content Type or Content not supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error406Response'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      security:
        - ApiKeyAuth: [ ]
          OrgKeyAuth: [ ]

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
    OrgKeyAuth:
      type: apiKey
      in: header
      name: x-org-key
  schemas:
    AIContentV2Response:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier associated with the response.
        status:
          type: string
          description: The status of the response.
        timestamp:
          type: integer
          description: The timestamp when the response was generated.
        content:
          type: string
          description: The content of the response.
        processing_count:
          type: integer
          description: The number of times the response has been processed.
      example:
        id: "1468dd39-aa8a-495e-9b87-7cf474cdf352"
        status: success
        timestamp: 1687798163795
        content: "Hello! I'm an AI, so I don't have feelings, but I'm here and ready to assist you. How can I help you today?"
        processing_count: 93

    AIContentV3Response:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier associated with the response.
        status:
          type: string
          description: The status of the response.
        timestamp:
          type: integer
          description: The timestamp when the response was generated.
        content:
          type: string
          description: The content of the response.
        processing_count:
          type: integer
          description: The number of times the response has been processed.
      example:
        id: "1468dd39-aa8a-495e-9b87-7cf474cdf352"
        status: success
        timestamp: 1687798163795
        content: "Hello! I'm an AI, so I don't have feelings, but I'm here and ready to assist you. How can I help you today?"
        processing_count: 93

    ImageDetectedText:
      type: object
      properties:
        Confidence:
          type: number
          description: The confidence level of the detected text
        DetectedText:
          type: string
          description: The detected text
        Geometry:
          $ref: '#/components/schemas/ImageTextGeometry'
        Id:
          type: integer
          description: The ID of the detected text
        ParentId:
          type: integer
          description: The ID of the parent text (if applicable)
        Type:
          type: string
          description: The type of the detected text
      example:
        'application/json':
          - id: "0d43b414-2a7a-425f-9f2d-4bd8d07a164d"
            status: success
            timestamp: 1683408470311
            content:
              - Confidence: 90.54900360107422
                DetectedText: "IT'S"
                Geometry:
                  BoundingBox:
                    Height: 0.10317354649305344
                    Left: 0.6677391529083252
                    Top: 0.17569075524806976
                    Width: 0.15113449096679688
                  Polygon:
                    - X: 0.6677391529083252
                      Y: 0.17569075524806976
                    - X: 0.8188736438751221
                      Y: 0.17574213445186615
                    - X: 0.8188582062721252
                      Y: 0.278915673494339
                    - X: 0.6677237153053284
                      Y: 0.2788642942905426
                Id: 0
                Type: LINE
              - Confidence: 59.411651611328125
                DetectedText: "I"
                Geometry:
                  BoundingBox:
                    Height: 0.05955825746059418
                    Left: 0.2763049304485321
                    Top: 0.394121915102005
                    Width: 0.026684552431106567
                  Polygon:
                    - X: 0.2763049304485321
                      Y: 0.394121915102005
                    - X: 0.30298948287963867
                      Y: 0.3932435214519501
                    - X: 0.30385109782218933
                      Y: 0.45280176401138306
                    - X: 0.27716654539108276
                      Y: 0.453680157661438
                Id: 1
                Type: LINE
              - Confidence: 92.76634979248047
                DetectedText: "MONDAY"
                Geometry:
                  BoundingBox:
                    Height: 0.15580485785007477
                    Left: 0.30405032682418823
                    Top: 0.15534435284137726
                    Width: 0.26672941493988037
                  Polygon:
                    - X: 0.30405032682418823
                      Y: 0.15534435284137726
                    - X: 0.5707797403335571
                      Y: 0.15536674892997742
                    - X: 0.5707595348358154
                      Y: 0.3111492099761963
                    - X: 0.3040300908088684
                      Y: 0.3111268138885498
                Id: 2
                Type: LINE
            processing_count: 1

    ImageTextGeometry:
      type: object
      properties:
        BoundingBox:
          $ref: '#/components/schemas/ImageTextBoundingBox'
        Polygon:
          type: array
          items:
            $ref: '#/components/schemas/ImageTextPoint'
          description: The polygon coordinates of the geometry

    ImageTextBoundingBox:
      type: object
      properties:
        Height:
          type: number
          description: The height of the bounding box
        Left:
          type: number
          description: The left coordinate of the bounding box
        Top:
          type: number
          description: The top coordinate of the bounding box
        Width:
          type: number
          description: The width of the bounding box

    ImageTextPoint:
      type: object
      properties:
        X:
          type: number
          description: The X coordinate of the point
        Y:
          type: number
          description: The Y coordinate of the point

    PDFExtractRequest:
      type: object
      properties:
        file:
          type: string
          format: binary
          description: The PDF file to extract content from.
        output_format:
          type: string
          enum:
            - text
            - json
          default: text
          description: The desired output format. Defaults to "text".
      required:
        - file
      example:
        file: [ PDF binary data ]
        output_format: text

    PDFExtractResponse:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier associated with the extraction process.
        status:
          type: string
          description: The status of the extraction process.
        timestamp:
          type: integer
          description: The timestamp when the extraction request was processed.
        content:
          oneOf:
            - $ref: "#/components/schemas/PdfTextExtractContent"
            - $ref: "#/components/schemas/PdfJsonExtractContent"
          description: The extracted content from the PDF.
        processing_count:
          type: integer
          description: The number of times the content has been processed to create the final content.
      example:
        value:
          id: "15b01f2c-125c-4824-9b89-9b140be9e7f0"
          status: success
          timestamp: 1687776023750
          content:
            0:
              - type: PAGE
                position:
                  BoundingBox:
                    Width: 1
                    Height: 1
                    Left: 0
                    Top: 0
                  Polygon:
                    - X: 0.000002764723831205629
                      Y: 0
                    - X: 1
                      Y: 0.000004283267116989009
                    - X: 1
                      Y: 1
                    - X: 0
                      Y: 1
                id: "d0d1ac22-3958-45ed-8bc6-c76eb637f5cc"
                dependencies:
                  - Type: CHILD
                    Ids:
                      - "720f5d2c-c59d-4648-9722-0d6f7de4cbe3"
                      - "bf135402-4ff0-4ae7-8c72-a0cec3559a91"
              - type: LINE
                position:
                  BoundingBox:
                    Width: 0.6681150794029236
                    Height: 0.014788508415222168
                    Left: 0.15100932121276855
                    Top: 0.08366494625806808
                  Polygon:
                    - X: 0.15103518962860107
                      Y: 0.08366494625806808
                    - X: 0.8191244006156921
                      Y: 0.08457615226507187
                    - X: 0.8191033601760864
                      Y: 0.09845345467329025
                    - X: 0.15100932121276855
                      Y: 0.09754297882318497
                score: 80.1580581665039
                id: "720f5d2c-c59d-4648-9722-0d6f7de4cbe3"
                dependencies:
                  - Type: CHILD
                    Ids:
                      - "3723328f-8b27-4b6f-8c98-d79bb6ffde62"
                      - "e73f4be1-e8f3-464a-8647-56a281facd0c"
                content: "Est et lorem vero dolor gubergren lorem. Dolor ut conseletur labore amet et dolor sed erat"

    PdfTextExtractContent:
      type: object
      properties:
        text_content:
          type: string
          description: The extracted text content from the PDF.
        tags:
          type: array
          items:
            $ref: "#/components/schemas/PdfTag"
          description: Additional tags associated with the extracted content.

    PdfJsonExtractContent:
      type: object
      additionalProperties:
        type: array
        items:
          $ref: "#/components/schemas/PdfStructuredData"
      description: The extracted structured data from the PDF.

    PdfTag:
      type: object
      properties:
        name:
          type: string
          description: The name of the tag.
        value:
          type: string
          description: The value associated with the tag.
        data:
          type: object
          additionalProperties: true
          description: Additional data associated with the tag.

    PdfStructuredData:
      type: object
      properties:
        type:
          type: string
          description: The type of the extracted element.
        position:
          type: object
          properties:
            BoundingBox:
              $ref: "#/components/schemas/PdfBoundingBox"
            Polygon:
              type: array
              items:
                $ref: "#/components/schemas/PdfPoint"
          description: The position of the extracted element.
        id:
          type: string
          description: The unique identifier associated with the extracted element.
        dependencies:
          type: array
          items:
            $ref: "#/components/schemas/PdfDependency"
          description: Dependencies of the extracted element.
        score:
          type: number
          description: The score or confidence level of the extracted element.
        content:
          type: string
          description: The extracted content of the element.

    PdfBoundingBox:
      type: object
      properties:
        Width:
          type: number
          description: The width of the bounding box.
        Height:
          type: number
          description: The height of the bounding box.
        Left:
          type: number
          description: The left coordinate of the bounding box.
        Top:
          type: number
          description: The top coordinate of the bounding box.

    PdfPoint:
      type: object
      properties:
        X:
          type: number
          description: The X coordinate of the point.
        Y:
          type: number
          description: The Y coordinate of the point.

    PdfDependency:
      type: object
      properties:
        Type:
          type: string
          description: The type of dependency.
        Ids:
          type: array
          items:
            type: string
          description: The unique identifiers of the dependent elements.

    WebExtractResponse:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier associated with the extraction process.
        status:
          type: string
          description: The status of the extraction process.
        timestamp:
          type: integer
          description: The timestamp when the extraction request was processed.
        content:
          type: object
          properties:
            text_content:
              type: string
              description: The extracted text content from the web page.
            tags:
              type: array
              description: The extracted tags from the web page.
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: The name of the tag.
                  value:
                    type: string
                    description: The value associated with the tag.
                  data:
                    type: object
                    description: Additional data associated with the tag.
        processing_count:
          type: integer
          description: The number of times the content has been processed to generate the final result.
      example:
        id: "77d4d87d-6e7e-4556-a4c2-aab535cfb5b4"
        status: "success"
        timestamp: 1683173445143
        content:
          text_content: |
            WorqHat

            🎉 Our Conversational Language Model WorqBot is now live for Beta use! Try out Now.🤖

            Resources

            APIs

            Connect your app to WorqHat

            Documentations

            Learn how to use our products

            Changelogs

            Check what's new

            Careers

            Find your dream role

            Community

            Connect with other developers, designers, and entrepreneurs

            Security

            Our Security Principles and Practices

            Blog

            Interviews, tutorials, Updates and more

            Status

            Outage updates and announcements

            Green Initiatives

            Partnerships to make the World Greener

            Contact Us



            Enterprise WorqHat Playground

            Join Waitlist

            Careers
            - Documentation
            - Changelog
            - Blogs
            - Security

            Subscribe to our newsletter

            Stay up to date with the latest news and updates from WorqHat.


            Join us!
            - LinkedIn >
            - Instagram
            - Facebook
            - Twitter
            - GitHub

            © 2023. Winlysis Pvt. Ltd., India All rights reserved.

            - Terms & Conditions
            - Privacy Policy
            - Statu
          tags:
            - name: language
              value: en
              data: { }
            - name: thumbnail
              value: "/resources/WorqHat TM Logo.png"
              data: { }
            - name: current_date
              value: "2023-01-01"
              data: { }
            - name: title
              span:
                - "0"
                - "7"
              span_text: WorqHat
              value: WorqHat
              data: { }
            - name: link
              span:
                - "45"
                - "52"
              span_text: WorqBot
              value: "//playground.worqhat.app/worqbot"
              data: { }
            - name: image
              span:
                - "94"
                - "94"
              value: "/resources/WorqHat TM Logo.png"
              data:
                alt: WorqHat Logo
            - name: control
              span:
                - "94"
                - "105"
              span_text: " Resources "
              value: " Resources "
              data: { }
            - name: subheading
              span:
                - "12016"
                - "12042"
              span_text: "Future-proof your business"
              value: "Future-proof your business"
              data: { }
            - name: link
              span:
                - "12224"
                - "12238"
              span_text: "Join Waitlist "
              value: "https://join.worqhat.com/waitlist"
              data: { }
            - name: image
              span:
                - "12295"
                - "12295"
              value: "/resources/integrations/logo-dropbox-40.svg"
              data:
                alt: Dropbox Icon
        processing_count: 2152

    ImageModerationResponse:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier associated with the moderation analysis process.
        status:
          type: string
          description: The status of the moderation analysis process.
        timestamp:
          type: integer
          description: The timestamp when the moderation analysis request was processed.
        content:
          type: array
          items:
            $ref: '#/components/schemas/ImageModerationCategory'
        processing_count:
          type: integer
          description: The number of times the content has been processed to generate the final analysis results.
      example:
        id: "0dfefbaf-41e6-43ae-83d1-c9751e3fe561"
        status: "success"
        timestamp: 1687754028548
        content:
          - Confidence: 96.70862579345703
            Name: "Female Swimwear Or Underwear"
            ParentName: "Suggestive"
          - Confidence: 96.70862579345703
            Name: "Suggestive"
            ParentName: ""
          - Confidence: 96.14669036865234
            Name: "Revealing Clothes"
            ParentName: "Suggestive"
        processing_count: 1

    ImageModerationCategory:
      type: object
      properties:
        Confidence:
          type: number
          description: The confidence level of the moderation analysis result.
        Name:
          type: string
          description: The name of the moderation category.
        ParentName:
          type: string
          description: The parent category of the moderation category.

    ModerationResponse:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the moderation request.
        status:
          type: string
          description: The status of the moderation process.
        timestamp:
          type: integer
          description: The timestamp when the moderation request was processed.
        content:
          type: object
          properties:
            sexual:
              type: string
              format: float
              description: The score for sexual content moderation.
            hate:
              type: string
              format: float
              description: The score for hate speech content moderation.
            violence:
              type: string
              format: float
              description: The score for violence content moderation.
            self-harm:
              type: string
              format: float
              description: The score for self-harm content moderation.
            "sexual/minors":
              type: string
              format: float
              description: The score for sexual content involving minors moderation.
            "hate/threatening":
              type: string
              format: float
              description: The score for threatening hate speech content moderation.
            "violence/graphic":
              type: string
              format: float
              description: The score for graphic violence content moderation.
          description: |
            The object containing the moderation results for different categories.
            The scores represent the likelihood of each category present in the content.
      example:
        id: "78f34ff3-08d5-4000-93f2-237ab46a3013"
        status: "success"
        timestamp: 1687729008633
        content:
          sexual: "5.2880e-7"
          hate: "0.0000031912"
          violence: "0.097897"
          self-harm: "0.070380"
          "sexual/minors": "4.9098e-7"
          "hate/threatening": "2.4003e-8"
          "violence/graphic": "0.0000020674"

    TextConversionResponse:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier associated with the conversion process.
        status:
          type: string
          description: The status of the conversion process.
        timestamp:
          type: integer
          description: The timestamp when the conversion request was processed.
        content:
          type: string
          description: The converted text from the speech.
        processing_count:
          type: integer
          description: The number of times the content has been processed to create the final content.
      example:
        id: "d94612c2-e572-479b-894e-8254705c2983"
        status: "success"
        timestamp: 1683211582017
        content: "I have a silky smooth voice, and today I will tell you about the exercise regimen of the common sloth."
        processing_count: 20

    AuthenticationResponse:
      type: object
      properties:
        status:
          type: string
          description: Status of the authentication process.
        message:
          type: string
          description: A message regarding the authentication status.
        organization_name:
          type: string
          description: The name of the authenticated organization.
        user_name:
          type: string
          description: The name of the authenticated user.
        user_email:
          type: string
          format: email
          description: The email of the authenticated user.
        timestamp:
          type: integer
          description: The timestamp when the authentication request was processed.
        id:
          type: string
          description: The Request ID associated with the authentication process.
      example:
        status: "success"
        message: "User Authenticated Successfully"
        organization_name: "Sample Organization Inc."
        user_name: "John Doe"
        user_email: "john@worqhat.com"
        timestamp: 1687753142003
        id: "a1146b58-a6fd-46a1-944c-3b1aad50d14b"

    Error400Response:
      type: object
      properties:
        status:
          type: string
          description: Status code indicating the error.
        message:
          type: string
          description: A message describing the error.
      example:
        status: "400"
        message: "Bad Request"

    Error401Response:
      type: object
      properties:
        status:
          type: string
          description: Status code indicating the error.
        message:
          type: string
          description: A message describing the error.
      example:
        status: "401"
        message: "Invalid API Key or Organization Key"

    Error406Response:
      type: object
      properties:
        status:
          type: string
          description: Status code indicating the error.
        message:
          type: string
          description: A message describing the error.
      example:
        status: "406"
        message: "Unable to process the request."

    Error404Response:
      type: object
      properties:
        status:
          type: string
          description: Status code indicating the error.
        message:
          type: string
          description: A message describing the error.
      example:
        status: "404"
        message: "Not Found"

    Error500Response:
      type: object
      properties:
        status:
          type: string
          description: Status code indicating the error.
        message:
          type: string
          description: A message describing the error.
      example:
        status: "500"
        message: "Internal Server Error"
